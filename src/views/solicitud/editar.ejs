<%- include('../partials/header', { title: 'Editar Solicitud' }) %>
<%- include('../partials/navbar') %>
<%- include('../partials/sidebar') %>
<%- include('../partials/content-wrapper-open') %>

<style>
  .card {
    border: 1px solid #ddd;
    border-radius: 10px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
  }
  .card-header {
    background-color: #f8f9fa;
    font-weight: 600;
    font-size: 1.2rem;
    border-bottom: 1px solid #ddd;
  }
  .card-body {
    padding: 20px;
  }
  .form-label {
    font-weight: 600;
    margin-bottom: 5px;
  }
  .form-control {
    border-radius: 8px;
    padding: 10px;
    font-size: 1rem;
  }
  .btn {
    border-radius: 8px;
    font-size: 1rem;
  }
  .file-icon {
    font-size: 1.5rem;
    margin-right: 10px;
  }
  .list-group-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 15px;
  }
  .character-count {
    font-size: 0.9rem;
    color: #6c757d;
  }
  .character-count.error {
    color: #dc3545;
  }
  .btn-back {
    margin-bottom: 20px;
  }
  .file-actions {
    display: flex;
    gap: 10px;
  }
  .file-upload {
    display: flex;
    align-items: center;
    gap: 15px;
  }
  #file-list .list-group-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
</style>

<div class="content-wrapper">
  <div class="container-xxl flex-grow-1 container-p-y">
    <a href="/solicitudes" class="btn btn-secondary btn-back">
      <i class="fas fa-arrow-left me-1"></i> Regresar
    </a>

    <div class="card">
      <div class="card-header">Detalles de la Solicitud #<%= solicitud.nro_solicitud %></div>
      <div class="card-body">
        <% if (successMessage && successMessage.length > 0) { %>
          <div class="alert alert-success alert-dismissible fade show" role="alert">
            <%= successMessage %>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Cerrar"></button>
          </div>
        <% } %>
        <% if (errorMessage && errorMessage.length > 0) { %>
          <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <%= errorMessage %>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Cerrar"></button>
          </div>
        <% } %>

        <form
          action="/solicitudes-editar/<%= solicitud.id_solicitud %>"
          method="POST"
          enctype="multipart/form-data"
          class="needs-validation"
          novalidate
        >
          <div class="mb-3">
            <label for="asunto" class="form-label">Asunto <span class="text-danger">*</span></label>
            <input
              type="text"
              id="asunto"
              name="asunto"
              class="form-control <%= errors.asunto ? 'is-invalid' : '' %>"
              placeholder="Indica el asunto de la solicitud"
              value="<%= asunto %>"
              maxlength="100"
              required
            />
            <% if (errors.asunto) { %>
              <div class="invalid-feedback"><%= errors.asunto %></div>
            <% } %>
            <small class="form-text text-muted">M치ximo 100 caracteres.</small>
          </div>

          <div class="mb-3">
            <label for="descripcion" class="form-label">Descripci칩n <span class="text-danger">*</span></label>
            <textarea
              id="descripcion"
              name="descripcion"
              class="form-control <%= errors.descripcion ? 'is-invalid' : '' %>"
              rows="4"
              maxlength="300"
              required
            ><%= descripcion %></textarea>
            <% if (errors.descripcion) { %>
              <div class="invalid-feedback"><%= errors.descripcion %></div>
            <% } %>
            <small id="descripcionCount" class="character-count">
              <%= descripcion.length %> / 300 caracteres
            </small>
          </div>

          <div class="card mt-4">
            <div class="card-header">Archivos Adjuntos</div>
            <div class="card-body">
              <% let existingFilesCount = 0; %>
              <% if (archivos && archivos.length > 0) { %>
                <h6 class="text-primary">Archivos Existentes</h6>
                <ul class="list-group mb-3" id="existing-file-list">
                  <% archivos.forEach((archivo) => { 
                    existingFilesCount++;
                    const blobName = archivo.url.split('/').pop();
                    const originalFileName = blobName.split('-').slice(2).join('-');
                    const extension = originalFileName.split('.').pop().toLowerCase();
                    const iconClass =
                      extension === 'pdf'
                        ? 'fas fa-file-pdf text-danger'
                        : ['jpg', 'jpeg', 'png'].includes(extension)
                        ? 'fas fa-file-image text-info'
                        : ['doc', 'docx'].includes(extension)
                        ? 'fas fa-file-word text-primary'
                        : ['xls', 'xlsx'].includes(extension)
                        ? 'fas fa-file-excel text-success'
                        : ['ppt', 'pptx'].includes(extension)
                        ? 'fas fa-file-powerpoint text-warning'
                        : 'fas fa-file text-secondary';
                  %>
                    <li class="list-group-item">
                      <div>
                        <i class="<%= iconClass %> file-icon"></i> <%= originalFileName %>
                      </div>
                      <button type="button" class="btn btn-sm btn-danger" onclick="removeExistingFile('<%= archivo.url %>', this)">
                        <i class="fas fa-times"></i>
                      </button>
                    </li>
                  <% }); %>
                </ul>
                <input type="hidden" name="deletedFiles" id="deletedFiles" value="[]">
              <% } %>

              <div class="mb-3">
                <div class="file-upload">
                  <button type="button" class="btn btn-outline-secondary" onclick="document.getElementById('archivos').click()">
                    <i class="fas fa-upload me-1"></i> Seleccionar Archivos
                  </button>
                  <input
                    type="file"
                    id="archivos"
                    name="archivos"
                    class="d-none"
                    accept=".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.jpg,.jpeg,.png"
                    multiple
                    onchange="handleFileSelect(this)"
                  />
                </div>
                <small class="form-text text-muted">
                  Formatos permitidos: PDF, DOC, DOCX, XLS, XLSX, PPT, PPTX, JPG, JPEG, PNG. M치ximo 10 archivos o 10 MB en total.
                </small>
                <ul id="file-list" class="list-group mt-2"></ul>
                <div id="file-indicators" class="mt-3">
                  <p id="file-count"><%= existingFilesCount %>/10 archivos (0 MB)</p>
                </div>
              </div>
            </div>
          </div>

          <div class="d-flex justify-content-end">
            <button type="submit" class="btn btn-primary">
              <i class="fas fa-save me-1"></i> Guardar Cambios
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<script>
  const extensionIcons = {
    pdf: { icon: 'fa-file-pdf', color: 'text-danger' },
    doc: { icon: 'fa-file-word', color: 'text-primary' },
    docx: { icon: 'fa-file-word', color: 'text-primary' },
    xls: { icon: 'fa-file-excel', color: 'text-success' },
    xlsx: { icon: 'fa-file-excel', color: 'text-success' },
    ppt: { icon: 'fa-file-powerpoint', color: 'text-warning' },
    pptx: { icon: 'fa-file-powerpoint', color: 'text-warning' },
    jpg: { icon: 'fa-file-image', color: 'text-info' },
    jpeg: { icon: 'fa-file-image', color: 'text-info' },
    png: { icon: 'fa-file-image', color: 'text-info' },
    default: { icon: 'fa-file', color: 'text-secondary' }
  };

  const maxFiles = 10;
  const maxSizeTotal = 10 * 1024 * 1024;

  let existingFilesCount = <%= existingFilesCount %>;
  const deletedFiles = [];

  function formatFileSize(bytes) {
    if (bytes < 1024) return `${bytes} B`;
    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(2)} KB`;
    return `${(bytes / (1024 * 1024)).toFixed(2)} MB`;
  }

  function updateFileCountDisplay() {
    const input = document.getElementById("archivos");
    const totalFiles = existingFilesCount + input.files.length;
    const fileCount = document.getElementById("file-count");
    const fileIndicators = document.getElementById("file-indicators");
    let totalSize = 0;

    Array.from(input.files).forEach(file => {
      totalSize += file.size;
    });

    fileIndicators.style.display = totalFiles > 0 ? "block" : "none";
    fileCount.textContent = `${totalFiles}/${maxFiles} archivos (${formatFileSize(totalSize)})`;
  }

  function handleFileSelect(input) {
    const files = Array.from(input.files);
    const fileList = document.getElementById("file-list");

    const totalFiles = existingFilesCount + files.length;
    if (totalFiles > maxFiles) {
      alert(`No puedes subir m치s de ${maxFiles} archivos en total.`);
      input.value = "";
      updateFileCountDisplay();
      fileList.innerHTML = "";
      return;
    }

    let totalSize = 0;
    const fileItems = files.map((file, index) => {
      totalSize += file.size;
      const extension = file.name.split('.').pop().toLowerCase();
      const { icon, color } = extensionIcons[extension] || extensionIcons.default;
      return `<li class="list-group-item">
                <div><i class="fas ${icon} ${color} me-2"></i>${file.name} (${formatFileSize(file.size)})</div>
                <button class="btn btn-sm btn-danger" onclick="removeFile(${index})"><i class="fas fa-times"></i></button>
              </li>`;
    });

    fileList.innerHTML = fileItems.join('');
    updateFileCountDisplay();
  }

  function removeFile(index) {
    const input = document.getElementById("archivos");
    const dt = new DataTransfer();
    const files = Array.from(input.files);

    files.splice(index, 1);

    files.forEach((file) => {
      dt.items.add(file);
    });

    input.files = dt.files;
    handleFileSelect(input);
  }

  function removeExistingFile(url, button) {
    const deletedFilesInput = document.getElementById('deletedFiles');
    const deletedFilesValue = JSON.parse(deletedFilesInput.value || '[]');
    deletedFilesValue.push(url);
    deletedFilesInput.value = JSON.stringify(deletedFilesValue);
    button.closest('li').remove();

    existingFilesCount--;
    updateFileCountDisplay();
  }

  document.addEventListener('DOMContentLoaded', function() {
    updateFileCountDisplay();

    const descripcionInput = document.getElementById('descripcion');
    const descripcionCount = document.getElementById('descripcionCount');
    descripcionInput.addEventListener('input', function() {
      const currentLength = descripcionInput.value.length;
      descripcionCount.textContent = `${currentLength} / 300 caracteres`;
    });
  });
</script>

<%- include('../partials/footer-text') %>
<%- include('../partials/footer') %>
<%- include('../partials/content-wrapper-close') %>
